##############################################################################
# Copyright (c) 2022 Leon Lynch
#
# This file is licensed under the terms of the LGPL v2.1 license.
# See LICENSE file.
##############################################################################

name: Ubuntu build

on: [push]

jobs:
  build-ubuntu-debug:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: "Ubuntu 20.04", os: ubuntu-20.04, deps: "none", build_emv_tool: NO }
          - { name: "Ubuntu 20.04", os: ubuntu-20.04, deps: "pcsclite", build_emv_tool: YES }
          - { name: "Ubuntu 22.04", os: ubuntu-22.04, deps: "pcsclite", build_emv_tool: YES }

    name: ${{ matrix.name }} build (static/debug/${{ matrix.deps }})
    runs-on: ${{ matrix.os }}

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libboost-locale-dev iso-codes libjson-c-dev

    - name: Install PCSCLite
      if: contains(matrix.deps, 'pcsclite')
      run: sudo apt-get install -y libpcsclite-dev

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - run: git describe --always --dirty

    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE="Debug" -DBUILD_EMV_TOOL=${{ matrix.build_emv_tool }}

    - name: Build
      run: cmake --build build

    - name: Test
      run: ctest --test-dir build --output-on-failure

  build-ubuntu-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: "Ubuntu 20.04", os: ubuntu-20.04, ubuntu_release_name: "focal" }
          - { name: "Ubuntu 22.04", os: ubuntu-22.04, ubuntu_release_name: "jammy" }

    name: ${{ matrix.name }} build (release)
    runs-on: ${{ matrix.os }}

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libboost-locale-dev iso-codes libjson-c-dev libpcsclite-dev doxygen

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Get version from git tag
      run: echo "GIT_DESCRIBE=$(git describe --always --dirty)" >> $GITHUB_ENV

    - name: Configure CMake
      # CPACK_DEBIAN_PACKAGE_RELEASE augments the package version for the
      # intended Ubuntu release. The ppa1 component indicates that this is not
      # an official Ubuntu package. The release name component indicates that
      # this is for the specific Ubuntu release that has that name.
      run: cmake -B build -DCMAKE_BUILD_TYPE="RelWithDebInfo" -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_SHARED_LIBS=YES -DBUILD_DOCS=YES -DCPACK_COMPONENTS_GROUPING=ALL_COMPONENTS_IN_ONE -DCPACK_DEBIAN_PACKAGE_RELEASE="0ubuntu1~ppa1~${{ matrix.ubuntu_release_name }}1"

    - name: Build
      run: cmake --build build

    - name: Test
      run: ctest --test-dir build --output-on-failure

    - name: Package
      run: cmake --build build --target package

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: emv-utils-${{ env.GIT_DESCRIBE }}-${{ matrix.os }}
        path: build/emv-utils_*.deb
        if-no-files-found: error
